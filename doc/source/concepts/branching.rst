.. _branching:

Conditional Branching
---------------------

The qctoolkit was designed to model conditional branching in pulse execution using the classes :class:`.BranchPulseTemplate` and :class:`.LoopPulseTemplate` of the :ref:`pulse template definition classes <pulsetemplates>`. The software is intended to support use of trigger-based hardware jumps between waveforms as well as software-based evaluation of branching conditions, if the hardware does not support triggers or highly sophisticated evaluation of measured data is required. These options are represented as instances of the :class:`.Condition` class: :class:`.BranchPulseTemplate` and :class:`.LoopPulseTemplate` both contain unique identifiers (chosen by the user) of a condition. In the beginning of the :ref:`sequencing process <sequencing>`, the user provides a dictionary of :class:`.Condition` instances which are used to determine how the conditions for each template are evaluated. Currently, two different subclasses of :class:`.Condition` exist: :class:`.SoftwareCondition` represents a software-evaluated condition and accepts a function reference to any evaluation function (which must return None, if it cannot yet be evaluated, or a boolean value); :class:`.HardwareCondition` represents trigger-based hardware evaluation and basically stores a reference to a trigger which will later be evaluated by the specific hardware driver to set up the device accordingly. Note that software-based evaluation will interrupt the sequencing process and thus the execution of the pulse, if the evaluation cannot be performed during the sequencing run, e.g., if the evaluation of the condition is based on measurement data made during pulse execution. In this case, the pulse instruction sequence is only generated up to the branching and must be re-invoked later on, after executing this first part and obtaining the required data. Software-based evaluation is thus not applicable when high performance is required.

Sequencing of Conditional Branching
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Software and hardware conditions result in different instruction sequences generated by the sequencing process: Hardware conditions will produce instructions for all possible branches with branching instructions corresponding to the triggers specified by the :class:`.HardwareCondition` instance. The selection of the correct branch is then made by the hardware. Contrary, software conditions will only produce instructions for the branch selected by the condition (the hardware never knows of the other path). In this case, no branching instructions will be used. This enables usage of branching even on hardware that does not support jumps with the caveat of being not real-time capable (as explained above).

A note on implementation: The abstract :class:`.Condition` class defines an methods for generating sequences for branches or loops and to query if the condition can be evaluated. These are implemented by :class:`.SoftwareCondition` and :class:`.HardwareCondition` in the ways mentioned above. :class:`.BranchPulseTemplate` and :class:`.LoopPulseTemplate` make use of the respective methods in their :meth:`.SequencingElement.build_sequence` method to defer sequence construction to the condition. Thus, during the sequencing process, the :class:`.Sequencer` calls :meth:`.SequencingElement.build_sequence` on the template which in turn invokes :meth:`.Condition.build_sequence_branch` or :meth:`.Condition.build_sequence_loop`. These then perform the actual sequence generation. These indirections allow for each class to act independently of the exact combination of if-else-branching versus looping and software- or hardware-based evaluation.

Future Work
^^^^^^^^^^^
Currently, there is no detailed concept on hardware abstraction and thus no meaningful representation of triggers and no hardware driver implementation that configures any device. This is still an open task.

It is quite common for hardware to allow triggers to be not only a boolean signal but, e.g., any 8-bit signal, thus enabling more than two branches. While this should still be covered by the current classes by nesting :class:`.BranchPulseTemplate`s and configuring triggers appropriately, the implementation of a template class which acts like a C-style switch statement might be a worthwhile consideration.