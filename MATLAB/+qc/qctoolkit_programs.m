%% Charge scan

%% 4 CHANs
pulseLocation = 'C:\Users\lablocal\Documents\PYTHON\qc-toolkit-pulses';
charge_scan_pulse = qctoolkit.load_pulse('general_charge_scan', pulseLocation);

charge_scan_pulse_params = struct( ...
	'N_y', 10, ...
	't_wait', 0, ... % ns
	'y_stop', 1, ...
	'x_stop', 1, ...
	'x_start', -1, ...
	'N_x', 10, ...
	't_meas', 192, ...
	'y_start', -1, ...
	'W_fast', 0, ...
	'W_slow', 1, ...
	'X_fast', 1, ...
	'X_slow', 0, ...
	'Y_fast', 0, ...
	'Y_slow', 1, ...
	'Z_fast', 0, ...
	'Z_slow', 1, ...
	'rep_count', 1 ...
	);
plsdata.daq.inst.config.totalRecordSize = int64(0); % needed
plsdata.daq.inst.config.aimedBufferSize = int64(2^24);
plsdata.daq.inst.card.reset
plsdata.daq.inst.update_settings = py.True;

%%
qc.plot_pulse(charge_scan_pulse, charge_scan_pulse_params)

%% 4 CHANs
operations = {...
	py.atsaverage.operations.Downsample('DS_A', 'A'),...
	py.atsaverage.operations.Downsample('DS_B', 'B')...
	...py.atsaverage.operations.Downsample('DS_C', 'alazarC'),...
	...py.atsaverage.operations.Downsample('DS_D', 'alazarD'),...
	};

plsdata.daq.inst.register_operations('general_charge_scan', py.list(operations))

%% 4 CHANs upload and arm
qc.arm_program('general_charge_scan', chargeScanPulseParams, ...
	'channel_mapping', struct('W', 'TABOR_A','X', 'TABOR_B','Y', 'TABOR_C', 'Z', 'TABOR_D', 'marker', 'TABOR_A_MARKER'), ...
	'window_mapping', struct('A', 'A', 'B', 'B'),...
	'update', true)

%% Same as above if program already uploaded
qc.arm_program('general_charge_scan');

%% Start program
awgctrl('run');

